Group Anagrams
================================================================================================
1) Using HashMap and sorting Approach

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        // Create a HashMap to store the grouped anagrams
        HashMap<String, List<String>> map = new HashMap<>();
        
        // Iterate through each string in the input array
        for (String str : strs) {
            // Convert the string to a character array and sort it
            char[] ch = str.toCharArray();
            Arrays.sort(ch);
            // Convert the sorted character array back to a string
            String sortedStr = new String(ch);
            
            // If the sorted string is not in the map, add it with a new list
            if (!map.containsKey(sortedStr)) {
                map.put(sortedStr, new ArrayList<>());
            }
            // Add the original string to the list corresponding to the sorted string
            map.get(sortedStr).add(str);
        }
        
        // Return the values of the map as a list of lists
        return new ArrayList<>(map.values());
    }
}
------------------------------------------------------------------------------------------------------------------------
2) Using HashMap and frequency count 

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        // Create a HashMap to store the grouped anagrams
        HashMap<String, List<String>> map = new HashMap<>();
        
        // Iterate through each string in the input array
        for (String str : strs) {
            // Create a character count array for 26 lowercase letters
            int[] count = new int[26];
            
            // Count the frequency of each character in the string
            for (char c : str.toCharArray()) {
                count[c - 'a']++; // Increment the count for this character
            }
            
            // Create a key from the character count array
            StringBuilder keyBuilder = new StringBuilder();
            for (int num : count) {
                keyBuilder.append(num).append('#'); // Use '#' as a separator
            }
            String key = keyBuilder.toString();
            
            // If the key is not in the map, add it with a new list
            if (!map.containsKey(key)) {
                map.put(key, new ArrayList<>());
            }
            // Add the original string to the list corresponding to the key
            map.get(key).add(str);
        }
        
        // Return the values of the map as a list of lists
        return new ArrayList<>(map.values());
    }
}
