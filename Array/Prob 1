Contains Duplicate
========================================================================
Brute Force Approach
------------------------------------------------------------------
class Solution {
    public boolean containsDuplicate(int[] nums) {
        boolean bool = false;
        if (nums.length == 0)
            return bool;

        for (int i = 0; i < nums.length; i++) {
            int n = nums[i];
            for (int j = i + 1; j < nums.length; j++) {
                if (n == nums[j]) {
                    bool = true;
                    return bool; // Found a duplicate
                }
            }
        }
        return bool; // No duplicates found
    }
}
------------------------------------------------------------------------------------------------
Optimized Solution
-----------------------------------------------------------------------------------------------
1) Using Sorting Technique

import java.util.Arrays;
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums); // Sort the array
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return true; // Found a duplicate
            }
        }
        return false; // No duplicates found
    }
}
---------------------------------------------------------------------------------------------------------
2) Using HashSet

import java.util.HashSet;
class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> seen = new HashSet<>();
        for (int num : nums) {
            if (seen.contains(num)) {
                return true; // Found a duplicate
            }
            seen.add(num);
        }
        return false; // No duplicates found
    }
}
