Valid Anagram
========================================================================================================
1) Iterative Approach

class Solution {
    public boolean isAnagram(String s, String t) {
        // If the lengths are different, they cannot be anagrams
        if (s.length() != t.length()) {
            return false;
        }
        // Create an array to count character frequencies
        int[] count = new int[26]; // Assuming only lowercase letters a-z
        // Count characters in s
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        // Decrease count based on characters in t
        for (char c : t.toCharArray()) {
            count[c - 'a']--;
            if (count[c - 'a'] < 0) {
                return false; // More of character c in t than in s
            }
        }

        return true; // All counts are zero, meaning they are anagrams
    }
}
------------------------------------------------------------------------------------------------------------
2) Sorting Approach

import java.util.Arrays;
class Solution {
    public boolean isAnagram(String s, String t) {
        // If the lengths are different, they cannot be anagrams
        if (s.length() != t.length()) {
            return false;
        }

        // Convert strings to character arrays and sort them
        char[] sArray = s.toCharArray();
        char[] tArray = t.toCharArray();
        
        Arrays.sort(sArray);
        Arrays.sort(tArray);
        
        // Compare the sorted arrays
        return Arrays.equals(sArray, tArray);
    }
}
--------------------------------------------------------------------------------------------------------------------
3) Using HashMap

import java.util.HashMap;
class Solution {
    public boolean isAnagram(String s, String t) {
        // If the lengths are different, they cannot be anagrams
        if (s.length() != t.length()) {
            return false;
        }
        // Create a HashMap to count character frequencies
        HashMap<Character, Integer> charCountMap = new HashMap<>();
        // Count characters in the first string
        for (char c : s.toCharArray()) {
            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);
        }
        // Decrease count based on characters in the second string
        for (char c : t.toCharArray()) {
            if (!charCountMap.containsKey(c)) {
                return false; // Character in t not found in s
            }
            charCountMap.put(c, charCountMap.get(c) - 1);
            if (charCountMap.get(c) < 0) {
                return false; // More of character c in t than in s
            }
        }

        return true; // All counts are zero, meaning they are anagrams
    }
}
